#
# by John Lampe
#

PASL_VERSION = "1.0";

# When a log() entry is made, the vulnerability will have this plugin ID.
NEW_DNS_ID = 7900;

# prm to subscribe to
DNS_EVENT = 719999;


obj = object();
obj.callback.add("DNSCallback");
obj.filter.event.id.add(DNS_EVENT);

MALWARE_IP[0] = "82.163.143.135"; MALWARE_DESC[0] = "MaMi";
MALWARE_IP[1] = "82.163.142.137"; MALWARE_DESC[1] = "MaMi";

function DNSCallback(obj)
{
    local_var dns_server;

    dns_server = obj.event.dst();
    if (strlen(dns_server) > 0)
        check_server(s:dns_server);
}


function compare_against_fbi_list(s)
{
    local_var regex, find_ip, ret;
    ret = 0;

    regex = "^(85\.255\.1(1[2-9]|2[0-7])|67.210\.([0-9]\.[0-9]+|1[0-5])|93\.188\.16[0-7]|77\.67\.83|213\.109\.(6[4-9]|7[0-9])|64\.28\.1(7[6-9]|8[0-9]|9[01]))\.[0-9]+";
    find_ip = eregmatch(pattern:regex, string:s);
    if (! isnull(find_ip))
        ret = 1;

    return ret;
}


function check_server(s)
{
    local_var search_idx, stored_servers, query_string, ret_string, update_string;

    #check KB to see if this server is already listed
    search_idx = string(obj.event.src(), "/7900/serverstr");
    stored_servers = get_kb_item(search_idx);

    # if this is first time script has run for this IP
    if (isnull(stored_servers))
    {
        set_kb_item(name:search_idx, value:string(",", s, ","));
        return;
    }
    else
    {
        query_string = string(",", s, ",");
        if (query_string >< stored_servers)
        {
            return;
        }
        else
        {
            #update KB
            update_string = string(stored_servers, s, ",");
            replace_kb_item(name:search_idx, value:update_string);
            ret_string = string("The new DNS server observed was : ", s);
            dns_report(s:ret_string);
        }
    }
}

function calc_risk(d)
{
    local_var i, tmp, fbi;
    tmp = make_list();
    tmp[0] = 3;
    tmp[1] = "N/A";

    for (i=0; MALWARE_IP[i]; i++)
    {
        if (d == MALWARE_IP[i])
        {
            tmp[0] = 5;
            tmp[1] = MALWARE_DESC[i];
            return tmp;
        }
    }

    fbi = compare_against_fbi_list(s:d);
    if (fbi == 1)
    {
        tmp[0] = 5;
        tmp[1] = "FBI malicious DNS Server list";
    }

    return tmp;
}



function dns_report(s)
{
    local_var id , name, synopsis, description, plugin_output, realtime, src_port, solution, seealso;
    local_var src_ip, bid, protocol, risk, cpe, family, cve, dst_ip, risk_tmp;

    src_ip = obj.event.src();
    dst_ip = obj.event.dst();

    plugin_output = s;
    src_port = 0;
    id = NEW_DNS_ID;

    protocol = obj.packet.ip.protocol();

    risk_tmp = calc_risk(d:dst_ip);
    if (risk_tmp[0] == 3)
    {
        risk = MEDIUM;
    }
    else
    {
        risk = HIGH;
        plugin_output = string(plugin_output, "  ***WARNING*** The DNS server is associated with a specific malware campaign - ", risk_tmp[1]);
    }

    seealso = "";
    family = "Generic";
    name = "New DNS Server Connection";
    synopsis = string("The remote host has just queried a new DNS server");
    description = string("The remote host has just initiated a query to a new DNS server. Ensure that the host is not being hijacked");
    realtime = YES;
    bid = "";
    nid = "";
    cpe = "";
    cve = "";
    solution = "N/A";


    obj.log(id:id,
            name:name,
            src_ip:src_ip,
            src_port:src_port,
            dst_ip:dst_ip,
            dst_port:53,
            protocol:protocol,
            synopsis:synopsis,
            solution:solution,
            seealso:seealso,
            risk:risk,
            cve:cve,
            core:core,
            cpe:cpe,
            bid:bid,
            description:description,
            stripped_description:description,
            plugin_output:plugin_output,
            realtime:realtime,
            family:family,
            nid:nid,
            version:PASL_VERSION);
}



