#
# by John Lampe
#

PASL_VERSION = "1.0";

include("JA3.inc");

# When a log() entry is made, the vulnerability will have this plugin ID.
NEW_JA3_HASH = 7901;

# prm to subscribe to
TLS_CLIENT_EVENT = 719998;


obj = object();
obj.callback.add("TLSClientHello");
obj.filter.event.id.add(TLS_CLIENT_EVENT);

g_min_packet_size = 48;


function TLSClientHello(obj)
{
    local_var packet_data, data_sz;

    packet_data = obj.packet.data();
    data_sz = strlen(packet_data);

    if (data_sz > g_min_packet_size)
        parse_client_hello(pkt:packet_data);
}


function parse_client_hello(pkt)
{
    local_var search_idx, stored_hashes, query_string, ret_string, update_string, ja3_hash;

    ja3_hash = calculate_ja3(pkt:pkt);

    if (isnull(ja3_hash))
        return NULL;

    #check KB to see if this hash is already denoted
    search_idx = string(obj.event.src(), "/7901/TLS_Client_Hello");
    stored_hashes = get_kb_item(search_idx);

    # if this is first time script has run for this IP
    if (isnull(stored_hashes))
    {
        set_kb_item(name:search_idx, value:string(",", ja3_hash, ","));
        if (signature[ja3_hash])
            ret_string = string("The newly observed JA3 hash was : ", ja3_hash, " (", signature[ja3_hash], ")" );
        else
            ret_string = string("The newly observed JA3 hash was : ", ja3_hash);
        ja3_report(s:ret_string);
        return;
    }
    else
    {
        query_string = string(",", ja3_hash, ",");
        if (query_string >< stored_hashes)
        {
            return;
        }
        else
        {
            #update KB
            update_string = string(stored_hashes, ja3_hash, ",");
            replace_kb_item(name:search_idx, value:update_string);
            if (signature[ja3_hash])
                ret_string = string("The newly observed JA3 hash was : ", ja3_hash, " (", signature[ja3_hash], ")" );
            else
                ret_string = string("The newly observed JA3 hash was : ", ja3_hash);
            ja3_report(s:ret_string);
        }
    }
}



function calculate_ja3(pkt)
{
    local_var ret = NULL;
    local_var version = 0;
    local_var myptr = 0;
    local_var session_id_len_offset = 43;
    local_var data_len = strlen(pkt);
    local_var cipher_len = 0;
    local_var i = 0;
    local_var j = 0;
    local_var grease = 0;
    local_var tmp = 0;
    local_var tmp2 = 0;
    local_var c_counter = 0;
    local_var ciphers = make_array();
    local_var extensions = make_array();
    local_var elliptic = make_array();
    local_var elliptic_format = make_array();
    local_var ext_len = 0;
    local_var skip = 0;
    local_var thing1 = 0;
    local_var thing2 = 0;
    local_var type = 0;
    local_var len = 0;
    local_var ext_counter = 0;
    local_var ec_counter = 0;
    local_var e_format_counter = 0;
    local_var stringer = "";

    version = (ord(pkt[myptr+1]) * 256) + ord(pkt[myptr+2]);
    stringer = string(version, ",");

    if (version < 769)
        return ret;

    myptr += session_id_len_offset;

    if (myptr >= data_len)
        return ret;

    myptr = myptr + ord(pkt[myptr]) + 1; #we now point to start of cipher suite len
    if (myptr >= (data_len+2))
        return ret;

    cipher_len = (ord(pkt[myptr]) * 256) + ord(pkt[myptr+1]);

    myptr += 2; # we now are sitting at start of first cipher

    if ( (myptr + cipher_len) >= data_len)
        return ret;


    for (i=0; i<cipher_len; i+=2)
    {
        #handle GREASE ciphers
        grease = 0;
        if ( (ord(pkt[myptr+i]) == ord(pkt[myptr+i+1])) && ((ord(pkt[myptr+i]) % 16) == 10) )
            grease = 1;

        tmp = (ord(pkt[myptr+i]) * 256) + ord(pkt[myptr+i+1]);

        if (0 == grease)
        {
            ciphers[c_counter] = tmp;
            c_counter++;
        }
    }

    myptr += cipher_len;        #we now point to start of compression methods len
    if (myptr >= data_len)
        return ret;

    tmp = ord(pkt[myptr]);
    myptr = myptr + tmp + 1;    #we now point to start of extensions len

    if ((myptr+1) >= data_len)
    {
        for (i=0; i<c_counter; i++)
        {
            if ((i+1) >= c_counter)
                stringer = string(stringer, ciphers[i]);
            else
                stringer = string(stringer, ciphers[i], "-");
        }
        stringer = string(stringer, ",,,");
        ret = str2md5(stringer:stringer);
        return ret;
    }


    ext_len = (ord(pkt[myptr]) * 256) + ord(pkt[myptr+1]);

    if ( (myptr + ext_len) >= data_len)
        return ret;

    myptr += 2;  #we now point to start of extensions (if they exist)

    i=0;
    while (i < ext_len)
    {
       skip = 0;
       if ( (myptr+i+1) >= data_len)
           return ret;

       type = (ord(pkt[myptr+i]) * 256) + ord(pkt[myptr+i+1]);
       thing1 = ord(pkt[myptr+i]);
       thing2 = ord(pkt[myptr+i+1]);
       if ( (thing1 == thing2) && ((thing1 % 16) == 10) && (thing1 != 0) )
       {
           # GREASE extension, skip it
           skip = 1;
       }

       if ( (myptr+i+3) >= data_len)
           return ret;

       len = (ord(pkt[myptr+i+2]) * 256) + ord(pkt[myptr+i+3]);

       i += 4;
       if (skip == 0)
       {
           extensions[ext_counter] = type;
           ext_counter++;
       }

        if (type == 0x0a)
        {
            if ( (myptr+i+3) >= data_len)
                return ret;

            tmp = (ord(pkt[myptr+i]) * 256) + ord(pkt[myptr+i+1]);

            for (j=0; j<tmp; j+=2)
            {
                if ( (myptr+i+j+3) >= data_len)
                    return ret;

                skip = 0;
                tmp2 = (ord(pkt[myptr+i+j+2]) * 256) + ord(pkt[myptr+i+j+3]);

                # HANDLE GREASE
                if ( (ord(pkt[myptr+i+j+2]) == ord(pkt[myptr+i+j+3])) && ((ord(pkt[myptr+i+j+2]) % 16) == 10) )
                    skip = 1;

                if (0 == skip)
                {
                    elliptic[ec_counter] = tmp2;
                    ec_counter++;
                }
            }
        }
        else if (type == 0x0b)
        {
            tmp = ord(pkt[myptr+i]);
            for (j=0; j<tmp; j++)
            {
                if ( (myptr+i+j+1) >= data_len)
                    return ret;

                tmp2 = ord(pkt[myptr+i+j+1]);
                elliptic_format[e_format_counter] = tmp2;
                e_format_counter++;
            }
        }
        i += len;
    }

    for (i=0; i<c_counter; i++)
    {
        if ((i+1) >= c_counter)
            stringer = string(stringer, ciphers[i], ",");
        else
            stringer = string(stringer, ciphers[i], "-");
    }

    if (ext_counter == 0)
    {
        stringer = string(stringer, ",");
    }
    else
    {
        for (i=0; i<ext_counter; i++)
        {
            if ((i+1) >= ext_counter)
                stringer = string(stringer, extensions[i], ",");
            else
                stringer = string(stringer, extensions[i], "-");
        }
    }

    if (ec_counter == 0)
    {
        stringer = string(stringer, ",");
    }
    else
    {
        for (i=0; i<ec_counter; i++)
        {
            if ((i+1) >= ec_counter)
                stringer = string(stringer, elliptic[i], ",");
            else
                stringer = string(stringer, elliptic[i], "-");
        }
    }

    if (e_format_counter == 0)
    {
        stringer = string(stringer, ",");
    }
    else
    {
        for (i=0; i<e_format_counter; i++)
        {
            if ((i+1) >= e_format_counter)
                stringer = string(stringer, elliptic_format[i]);
            else
                stringer = string(stringer, elliptic_format[i], "-");
        }
    }


    ret = str2md5(stringer:stringer);
 
    return ret;
}



function ja3_report(s)
{
    local_var id , name, synopsis, description, plugin_output, realtime, src_port, solution, seealso;
    local_var src_ip, bid, protocol, risk, cpe, family, cve, dst_ip, risk_tmp;

    src_ip = obj.event.src();
    dst_ip = obj.event.dst();

    plugin_output = s;
    src_port = 0;
    id = NEW_JA3_HASH;
    protocol = obj.packet.ip.protocol();
    dport = obj.event.dport();
    risk = MEDIUM;

    seealso = "";
    family = "Generic";
    name = "New TLS JA3 hash";
    synopsis = string("A new JA3 hash was observed on the network");
    description = string("The remote host has just initiated a TLS Client HELLO.");
    realtime = YES;
    bid = "";
    nid = "";
    cpe = "";
    cve = "";
    solution = "N/A";


    obj.log(id:id,
            name:name,
            src_ip:src_ip,
            src_port:src_port,
            dst_ip:dst_ip,
            dst_port:dport,
            protocol:protocol,
            synopsis:synopsis,
            solution:solution,
            seealso:seealso,
            risk:risk,
            cve:cve,
            core:core,
            cpe:cpe,
            bid:bid,
            description:description,
            stripped_description:description,
            plugin_output:plugin_output,
            realtime:realtime,
            family:family,
            nid:nid,
            version:PASL_VERSION);
}



function str2md5(stringer)
{
    local_var ret = NULL;

    if (strlen(stringer) > 4)
    {
        ret = MD5(stringer);
        ret = hexstr(ret);
    }

    return ret;     
}
