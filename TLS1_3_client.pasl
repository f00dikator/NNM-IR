#
# by John Lampe
#

PASL_VERSION = "1.0";

# When a log() entry is made, the vulnerability will have this plugin ID.
TLS13_client = 7902;

# prm to subscribe to
TLS_13_CLIENT_EVENT = 719997;

g_min_packet_size = 48;

obj = object();
obj.callback.add("TLS13Hello");
obj.filter.event.id.add(TLS_13_CLIENT_EVENT);



function TLS13Hello(obj)
{
    local_var packet_data, data_sz;

    packet_data = obj.packet.data();
    data_sz = strlen(packet_data);

    if (data_sz > g_min_packet_size)
        parse_client_hello(pkt:packet_data);
}


function parse_client_hello(pkt)
{
    local_var find_ext = NULL;

    find_ext = get_extensions(pkt:pkt);

    if (isnull(find_ext))
        return;   
    else
        tls13_report();
}



function get_extensions(pkt)
{
    local_var supported_version = 0;
    local_var format_len = 0;
    local_var ret = NULL;
    local_var myptr = 0;
    local_var session_id_len_offset = 43;
    local_var data_len = strlen(pkt);
    local_var i = 0;
    local_var len = 0;
    local_var j = 0;
    local_var tmp = 0;
    local_var ext_len = 0;
    local_var type = 0;

    myptr += session_id_len_offset;

    if (myptr >= data_len)
        return ret;

    myptr = myptr + ord(pkt[myptr]) + 1; 

    if ( (myptr+2) >= data_len)
        return ret;

    cipher_len = (ord(pkt[myptr]) * 256) + ord(pkt[myptr+1]);

    myptr += 2; # we now are sitting at start of first cipher

    myptr += cipher_len;       
    if (myptr >= data_len)
        return ret;

    tmp = ord(pkt[myptr]);
    myptr = myptr + tmp + 1;    #we now point to start of extensions len

    ext_len = (ord(pkt[myptr]) * 256) + ord(pkt[myptr+1]);

    if ( (myptr + ext_len) >= data_len)
        return ret;

    myptr += 2;  #we now point to start of extensions (if they exist)

    i=0;
    while (i < ext_len)
    {
       if ( (myptr+i+3) >= data_len)
           return ret;

       type = (ord(pkt[myptr+i]) * 256) + ord(pkt[myptr+i+1]);

       len = (ord(pkt[myptr+i+2]) * 256) + ord(pkt[myptr+i+3]);

       i += 4;

       if (type == 43)
       {
           format_len = ord(pkt[myptr+i]);
           i++;

            for (j=0; j<format_len; j+=2)
            {
                supported_version = (ord(pkt[myptr+i]) * 256) + ord(pkt[myptr+i+1]);
                if (supported_version == 0x7f12)
                {
                    return 1;
                }
                i += 2;
            }    
            i+=2;
        }
        else
        {
            i += len;
        }
    }

    return ret;
}



function tls13_report() 
{
    local_var id , name, synopsis, description, plugin_output, realtime, src_port, solution, seealso;
    local_var src_ip, bid, protocol, risk, cpe, family, cve, dst_ip, risk_tmp;

    src_ip = obj.event.src();
    dst_ip = obj.event.dst();

    src_port = 0;
    id = TLS13_client;
    protocol = obj.packet.ip.protocol();
    dport = obj.event.dport();
    risk = INFO;

    seealso = "";
    family = "Generic";
    name = "TLS Client supports experimental TLS 1.3";
    synopsis = string("The TLS Client supports the experimental TLS 1.3 protocol");
    description = string("The TLS Client supports the experimental TLS 1.3 protocol");
    realtime = NO;
    bid = "";
    nid = "";
    cpe = "";
    cve = "";
    solution = "N/A";


    obj.log(id:id,
            name:name,
            src_ip:src_ip,
            src_port:src_port,
            dst_ip:dst_ip,
            dst_port:dport,
            protocol:protocol,
            synopsis:synopsis,
            solution:solution,
            seealso:seealso,
            risk:risk,
            cve:cve,
            core:core,
            cpe:cpe,
            bid:bid,
            description:description,
            stripped_description:description,
            plugin_output:plugin_output,
            realtime:realtime,
            family:family,
            nid:nid,
            version:PASL_VERSION);
}


